[{"name":"class Lexer","description":"io.github.cybercodernaj.parkour.lexer.internal.Lexer","location":"core/io.github.cybercodernaj.parkour.lexer.internal/-lexer/index.html","searchKeys":["Lexer","class Lexer","io.github.cybercodernaj.parkour.lexer.internal.Lexer"]},{"name":"class LexerBuilder","description":"io.github.cybercodernaj.parkour.lexer.LexerBuilder","location":"core/io.github.cybercodernaj.parkour.lexer/-lexer-builder/index.html","searchKeys":["LexerBuilder","class LexerBuilder","io.github.cybercodernaj.parkour.lexer.LexerBuilder"]},{"name":"class LexicalException(message: String? = null, cause: Throwable? = null) : Exception","description":"io.github.cybercodernaj.parkour.exceptions.LexicalException","location":"core/io.github.cybercodernaj.parkour.exceptions/-lexical-exception/index.html","searchKeys":["LexicalException","class LexicalException(message: String? = null, cause: Throwable? = null) : Exception","io.github.cybercodernaj.parkour.exceptions.LexicalException"]},{"name":"constructor(message: String? = null, cause: Throwable? = null)","description":"io.github.cybercodernaj.parkour.exceptions.LexicalException.LexicalException","location":"core/io.github.cybercodernaj.parkour.exceptions/-lexical-exception/-lexical-exception.html","searchKeys":["LexicalException","constructor(message: String? = null, cause: Throwable? = null)","io.github.cybercodernaj.parkour.exceptions.LexicalException.LexicalException"]},{"name":"fun hardKeywords(vararg keywords: String)","description":"io.github.cybercodernaj.parkour.lexer.LexerBuilder.hardKeywords","location":"core/io.github.cybercodernaj.parkour.lexer/-lexer-builder/hard-keywords.html","searchKeys":["hardKeywords","fun hardKeywords(vararg keywords: String)","io.github.cybercodernaj.parkour.lexer.LexerBuilder.hardKeywords"]},{"name":"fun lexer(init: LexerBuilder.() -> Unit): Lexer","description":"io.github.cybercodernaj.parkour.lexer.lexer","location":"core/io.github.cybercodernaj.parkour.lexer/lexer.html","searchKeys":["lexer","fun lexer(init: LexerBuilder.() -> Unit): Lexer","io.github.cybercodernaj.parkour.lexer.lexer"]},{"name":"fun operators(vararg operators: String)","description":"io.github.cybercodernaj.parkour.lexer.LexerBuilder.operators","location":"core/io.github.cybercodernaj.parkour.lexer/-lexer-builder/operators.html","searchKeys":["operators","fun operators(vararg operators: String)","io.github.cybercodernaj.parkour.lexer.LexerBuilder.operators"]},{"name":"fun separators(vararg separators: String)","description":"io.github.cybercodernaj.parkour.lexer.LexerBuilder.separators","location":"core/io.github.cybercodernaj.parkour.lexer/-lexer-builder/separators.html","searchKeys":["separators","fun separators(vararg separators: String)","io.github.cybercodernaj.parkour.lexer.LexerBuilder.separators"]},{"name":"object Defaults","description":"io.github.cybercodernaj.parkour.lexer.internal.Lexer.Defaults","location":"core/io.github.cybercodernaj.parkour.lexer.internal/-lexer/-defaults/index.html","searchKeys":["Defaults","object Defaults","io.github.cybercodernaj.parkour.lexer.internal.Lexer.Defaults"]},{"name":"val escapeSequences: List<Pair<Regex, (String) -> Char>>","description":"io.github.cybercodernaj.parkour.lexer.internal.Lexer.Defaults.escapeSequences","location":"core/io.github.cybercodernaj.parkour.lexer.internal/-lexer/-defaults/escape-sequences.html","searchKeys":["escapeSequences","val escapeSequences: List<Pair<Regex, (String) -> Char>>","io.github.cybercodernaj.parkour.lexer.internal.Lexer.Defaults.escapeSequences"]},{"name":"val floatingLiteral: Regex","description":"io.github.cybercodernaj.parkour.lexer.internal.Lexer.Defaults.floatingLiteral","location":"core/io.github.cybercodernaj.parkour.lexer.internal/-lexer/-defaults/floating-literal.html","searchKeys":["floatingLiteral","val floatingLiteral: Regex","io.github.cybercodernaj.parkour.lexer.internal.Lexer.Defaults.floatingLiteral"]},{"name":"val identifiers: Regex","description":"io.github.cybercodernaj.parkour.lexer.internal.Lexer.Defaults.identifiers","location":"core/io.github.cybercodernaj.parkour.lexer.internal/-lexer/-defaults/identifiers.html","searchKeys":["identifiers","val identifiers: Regex","io.github.cybercodernaj.parkour.lexer.internal.Lexer.Defaults.identifiers"]},{"name":"val ignorePattern: Regex","description":"io.github.cybercodernaj.parkour.lexer.internal.Lexer.Defaults.ignorePattern","location":"core/io.github.cybercodernaj.parkour.lexer.internal/-lexer/-defaults/ignore-pattern.html","searchKeys":["ignorePattern","val ignorePattern: Regex","io.github.cybercodernaj.parkour.lexer.internal.Lexer.Defaults.ignorePattern"]},{"name":"val integerLiteral: Regex","description":"io.github.cybercodernaj.parkour.lexer.internal.Lexer.Defaults.integerLiteral","location":"core/io.github.cybercodernaj.parkour.lexer.internal/-lexer/-defaults/integer-literal.html","searchKeys":["integerLiteral","val integerLiteral: Regex","io.github.cybercodernaj.parkour.lexer.internal.Lexer.Defaults.integerLiteral"]},{"name":"val multilineComments: Pair<Regex, Regex>? = null","description":"io.github.cybercodernaj.parkour.lexer.internal.Lexer.Defaults.multilineComments","location":"core/io.github.cybercodernaj.parkour.lexer.internal/-lexer/-defaults/multiline-comments.html","searchKeys":["multilineComments","val multilineComments: Pair<Regex, Regex>? = null","io.github.cybercodernaj.parkour.lexer.internal.Lexer.Defaults.multilineComments"]},{"name":"val singleLineComments: Regex? = null","description":"io.github.cybercodernaj.parkour.lexer.internal.Lexer.Defaults.singleLineComments","location":"core/io.github.cybercodernaj.parkour.lexer.internal/-lexer/-defaults/single-line-comments.html","searchKeys":["singleLineComments","val singleLineComments: Regex? = null","io.github.cybercodernaj.parkour.lexer.internal.Lexer.Defaults.singleLineComments"]},{"name":"val singleLineString: Set<String>","description":"io.github.cybercodernaj.parkour.lexer.internal.Lexer.Defaults.singleLineString","location":"core/io.github.cybercodernaj.parkour.lexer.internal/-lexer/-defaults/single-line-string.html","searchKeys":["singleLineString","val singleLineString: Set<String>","io.github.cybercodernaj.parkour.lexer.internal.Lexer.Defaults.singleLineString"]},{"name":"var identifiers: Regex","description":"io.github.cybercodernaj.parkour.lexer.LexerBuilder.identifiers","location":"core/io.github.cybercodernaj.parkour.lexer/-lexer-builder/identifiers.html","searchKeys":["identifiers","var identifiers: Regex","io.github.cybercodernaj.parkour.lexer.LexerBuilder.identifiers"]},{"name":"var ignorePattern: Regex","description":"io.github.cybercodernaj.parkour.lexer.LexerBuilder.ignorePattern","location":"core/io.github.cybercodernaj.parkour.lexer/-lexer-builder/ignore-pattern.html","searchKeys":["ignorePattern","var ignorePattern: Regex","io.github.cybercodernaj.parkour.lexer.LexerBuilder.ignorePattern"]},{"name":"var multilineComments: Pair<Regex, Regex>?","description":"io.github.cybercodernaj.parkour.lexer.LexerBuilder.multilineComments","location":"core/io.github.cybercodernaj.parkour.lexer/-lexer-builder/multiline-comments.html","searchKeys":["multilineComments","var multilineComments: Pair<Regex, Regex>?","io.github.cybercodernaj.parkour.lexer.LexerBuilder.multilineComments"]},{"name":"var singleLineComments: Regex?","description":"io.github.cybercodernaj.parkour.lexer.LexerBuilder.singleLineComments","location":"core/io.github.cybercodernaj.parkour.lexer/-lexer-builder/single-line-comments.html","searchKeys":["singleLineComments","var singleLineComments: Regex?","io.github.cybercodernaj.parkour.lexer.LexerBuilder.singleLineComments"]}]