[{"name":"class Lexer(ignorePattern: Regex = Regex(\"\"\"\\s+\"\"\"), singleLineComments: Regex? = null, multilineComments: Pair<Regex, Regex>? = null, identifiers: Regex = Regex(\"\"\"[a-zA-Z_]\\w*\"\"\"), hardKeywords: Set<String> = emptySet(), operators: Set<String> = emptySet(), separators: Set<String> = emptySet(), literals: Literals = Literals())","description":"io.github.cybercodernaj.parkour.lexer.Lexer","location":"core/io.github.cybercodernaj.parkour.lexer/-lexer/index.html","searchKeys":["Lexer","class Lexer(ignorePattern: Regex = Regex(\"\"\"\\s+\"\"\"), singleLineComments: Regex? = null, multilineComments: Pair<Regex, Regex>? = null, identifiers: Regex = Regex(\"\"\"[a-zA-Z_]\\w*\"\"\"), hardKeywords: Set<String> = emptySet(), operators: Set<String> = emptySet(), separators: Set<String> = emptySet(), literals: Literals = Literals())","io.github.cybercodernaj.parkour.lexer.Lexer"]},{"name":"class LexicalException(message: String? = null, cause: Throwable? = null) : Exception","description":"io.github.cybercodernaj.parkour.exceptions.LexicalException","location":"core/io.github.cybercodernaj.parkour.exceptions/-lexical-exception/index.html","searchKeys":["LexicalException","class LexicalException(message: String? = null, cause: Throwable? = null) : Exception","io.github.cybercodernaj.parkour.exceptions.LexicalException"]},{"name":"class Literals(integerLiteral: Regex? = Regex(\"\"\"[-+]?[0-9_]+\"\"\"), floatingLiteral: Regex? = Regex(\"\"\"[-+]?[0-9_]*\\.[0-9_]+(?:[eE][-+]?[0-9_]+)?\"\"\"), singleLineString: Set<String> = setOf(\"\\\"\", \"\\'\"), escapeSequences: List<Pair<Regex, (String) -> Char>> = emptyList())","description":"io.github.cybercodernaj.parkour.lexer.Literals","location":"core/io.github.cybercodernaj.parkour.lexer/-literals/index.html","searchKeys":["Literals","class Literals(integerLiteral: Regex? = Regex(\"\"\"[-+]?[0-9_]+\"\"\"), floatingLiteral: Regex? = Regex(\"\"\"[-+]?[0-9_]*\\.[0-9_]+(?:[eE][-+]?[0-9_]+)?\"\"\"), singleLineString: Set<String> = setOf(\"\\\"\", \"\\'\"), escapeSequences: List<Pair<Regex, (String) -> Char>> = emptyList())","io.github.cybercodernaj.parkour.lexer.Literals"]},{"name":"constructor(ignorePattern: Regex = Regex(\"\"\"\\s+\"\"\"), singleLineComments: Regex? = null, multilineComments: Pair<Regex, Regex>? = null, identifiers: Regex = Regex(\"\"\"[a-zA-Z_]\\w*\"\"\"), hardKeywords: Set<String> = emptySet(), operators: Set<String> = emptySet(), separators: Set<String> = emptySet(), literals: Literals = Literals())","description":"io.github.cybercodernaj.parkour.lexer.Lexer.Lexer","location":"core/io.github.cybercodernaj.parkour.lexer/-lexer/-lexer.html","searchKeys":["Lexer","constructor(ignorePattern: Regex = Regex(\"\"\"\\s+\"\"\"), singleLineComments: Regex? = null, multilineComments: Pair<Regex, Regex>? = null, identifiers: Regex = Regex(\"\"\"[a-zA-Z_]\\w*\"\"\"), hardKeywords: Set<String> = emptySet(), operators: Set<String> = emptySet(), separators: Set<String> = emptySet(), literals: Literals = Literals())","io.github.cybercodernaj.parkour.lexer.Lexer.Lexer"]},{"name":"constructor(integerLiteral: Regex? = Regex(\"\"\"[-+]?[0-9_]+\"\"\"), floatingLiteral: Regex? = Regex(\"\"\"[-+]?[0-9_]*\\.[0-9_]+(?:[eE][-+]?[0-9_]+)?\"\"\"), singleLineString: Set<String> = setOf(\"\\\"\", \"\\'\"), escapeSequences: List<Pair<Regex, (String) -> Char>> = emptyList())","description":"io.github.cybercodernaj.parkour.lexer.Literals.Literals","location":"core/io.github.cybercodernaj.parkour.lexer/-literals/-literals.html","searchKeys":["Literals","constructor(integerLiteral: Regex? = Regex(\"\"\"[-+]?[0-9_]+\"\"\"), floatingLiteral: Regex? = Regex(\"\"\"[-+]?[0-9_]*\\.[0-9_]+(?:[eE][-+]?[0-9_]+)?\"\"\"), singleLineString: Set<String> = setOf(\"\\\"\", \"\\'\"), escapeSequences: List<Pair<Regex, (String) -> Char>> = emptyList())","io.github.cybercodernaj.parkour.lexer.Literals.Literals"]},{"name":"constructor(message: String? = null, cause: Throwable? = null)","description":"io.github.cybercodernaj.parkour.exceptions.LexicalException.LexicalException","location":"core/io.github.cybercodernaj.parkour.exceptions/-lexical-exception/-lexical-exception.html","searchKeys":["LexicalException","constructor(message: String? = null, cause: Throwable? = null)","io.github.cybercodernaj.parkour.exceptions.LexicalException.LexicalException"]}]